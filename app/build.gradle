apply plugin: 'com.android.application'

// Основные настройки приложения
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "ru.electric.ec.online"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def name = "v${variant.versionName}.${variant.versionCode}-${variant.name}.apk"
                    output.outputFileName = name
                }
            }
        }
        debug {
            testCoverageEnabled = true
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
        encoding = 'UTF-8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            useJUnitPlatform()
        }
    }
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

// Зависимости
dependencies {
    // Система
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'

    // Интерфейс (ConstraintLayout, RecycleView, DrawerLayout, SwipeRefreshLayout, AndroidPdfViewer)
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'

    // Работа с сетью и API (Retrofit2, OkHttp3, Gson, Guava)
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:28.2-jre'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.1'

    // Работа с локальной базой данных (SQLite, Room)
    implementation 'androidx.room:room-runtime:2.2.4'
    testImplementation 'androidx.room:room-testing:2.2.4'
    annotationProcessor 'androidx.room:room-compiler:2.2.4'

    // Unit-тесты (JUnit5, Mockito2, OkHttp3.MockWebServer)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.mockito:mockito-core:2.27.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.27.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.4.0'

    // UI-тестирование (Espresso3)
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'
}

// Формирование JavaDoc
task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PACKAGE
    options.use = true
    options.author = true
    options.version = true
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}

afterEvaluate {
    javadoc.classpath += files(android.applicationVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

// Формирование и показ JavaDoc
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name == "javadoc") {
        def file = project.file('../javadoc/index.html')
        browse file
    }
}

// Формирование и показ отчета по unit-тестам
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name == "testDebugUnitTest") {
        def file = project.file('build/reports/tests/testDebugUnitTest/index.html')
        browse file
    }
}

// Формирование и показ отчета по ui-тестам
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name == "connectedDebugAndroidTest") {
        def file = project.file('build/reports/androidTests/connected/index.html')
        browse file
    }
}

def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}
