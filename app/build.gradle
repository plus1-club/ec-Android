apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "ru.electric.ec.online"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 90
        versionName "0.5"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def name = "v${variant.versionName}.${variant.versionCode}-${variant.name}.apk"
                    output.outputFileName = name
                }
            }
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
        encoding = 'UTF-8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Система
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'

    // Интерфейс
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.0.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    // Работа с сетью и API (OkHttp, Retrofit)
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.0'

    // Тестирование
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.mockito:mockito-core:2.27.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.27.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PACKAGE
    options.use = true
    options.author = true
    options.version = true
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}

afterEvaluate {
    javadoc.classpath += files(android.applicationVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}